/** THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 * instead, edit `.graphql` files and run graphql-codegen script
 * for this file to be re-created */

import * as Types from '../../graphql/types.generated';

import { api } from '../../graphql/authApi';
export type LoginMutationVariables = Types.Exact<{
  email: Types.Scalars['String'];
  password: Types.Scalars['String'];
}>;


export type LoginMutation = { __typename?: 'RootMutation', login: { __typename?: 'AuthData', userId: string, token: string } };


export const LoginDocument = `
    mutation Login($email: String!, $password: String!) {
  login(email: $email, password: $password) {
    userId
    token
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  endpoints: (build) => ({
    Login: build.mutation<LoginMutation, LoginMutationVariables>({
      query: (variables) => ({ document: LoginDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useLoginMutation } = injectedRtkApi;

